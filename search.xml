<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习c++的一些笔记</title>
    <url>/2020/03/05/%E5%AD%A6%E4%B9%A0cpp%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><ul>
<li>大部分内容c都有，引入类的概念</li>
</ul>
<h3 id="第二章-变量和基本类型"><a href="#第二章-变量和基本类型" class="headerlink" title="第二章 变量和基本类型"></a>第二章 变量和基本类型</h3><a id="more"></a>

<p><strong><em>类型是编程的基础</em></strong></p>
<hr>
<ul>
<li><p>选择类型的经验准则</p>
<ul>
<li>当明确知道数值不可能为负时，选用无符号类型。</li>
<li>使用int执行整数运算。</li>
<li>在算数表达式中不要使用char或bool，只有在存放字符或布尔值时才用它们。</li>
<li>执行浮点数运算选用double，这是因为float通常精度不够而且双精度浮点数和单精度浮点数的计算代价相差无几。</li>
</ul>
</li>
<li><p>定义在函数体内部的内置类型变量将<strong>不被初始化</strong> </p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> local_int;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>指针和引用的区别</p>
<ul>
<li>指针本身是一个对象，允许对指针赋值和拷贝，而且在指针的生命周期内它可以指向几个不同的对象；引用不是一个对象，无法令引用重新绑定到另外一个对象。</li>
<li>指针无须再定义时赋初值，和其他内置类型一样，在块作用域内定义的指针如果没有被初始化，也将拥有一个不确定的值；引用则必须在定义时赋初值。</li>
</ul>
</li>
<li><p>顶层const</p>
<ul>
<li>顶层const可以表示任意的对象是常量，这一点对任何数据类型都适用，如算术类型、类、指针等。</li>
<li>底层const则与指针和引用等符合类型的基本类型部分有关。</li>
<li>特殊的是，指针既可以是顶层const又可以是底层const。</li>
<li>auto一般会忽略掉顶层const，同时底层const则会保留下来。</li>
<li>执行对象的拷贝操作时，常量时顶层const还是底层const区别明显。<ul>
<li>顶层const不受什么影响，执行拷贝操作并不会改变拷贝对象的值。</li>
<li>底层const的限制不能忽视，当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层cosnt资格。或者两个对象的数据类型必须能够转换。</li>
</ul>
</li>
</ul>
</li>
<li><p>指针和constexpr</p>
<ul>
<li>限定符constexpr仅对指针有效，与指针所指的对象无关。</li>
</ul>
</li>
<li><p>类型别名的易错点</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *pstring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pstring cstr=<span class="number">0</span>;<span class="comment">//cstr是指向char的常量指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * cstr=<span class="number">0</span>;<span class="comment">//cstr是指向常量char的指针</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>auto的一些知识点</p>
<ul>
<li>赋值式子中的右值是引用时，以引用对象的类型作为auto的类型。</li>
<li>auto一般会忽略掉顶层const，同时底层const会保留下来。（顶层const需要明确指出）</li>
<li>要在一条语句中定义多个变量，初始值必须是同一种类型。</li>
</ul>
</li>
<li><p>decltype</p>
<ul>
<li><p>作用：选择并返回操作数的数据类型。在此过程中，编译器分析表达式并得到它的类型。但不实际计算表达式的值。</p>
</li>
<li><p>与auto不同的地方：如果decltype使用的表达式是一个变量，则返回该变量的类型。（*<em>引用 *</em>）</p>
</li>
<li><p>decltype和引用</p>
<ul>
<li>表达式内容是解引用操作，则得到引用类型。</li>
<li>decltype<strong>((</strong>variable<strong>))</strong>的结果永远是引用。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="第三章-字符串、向量和数组"><a href="#第三章-字符串、向量和数组" class="headerlink" title="第三章 字符串、向量和数组"></a>第三章 字符串、向量和数组</h3><p><strong><em>优先选用标准库提供的类型，之后再考虑c++内置的低层的替代品数组或指针</em></strong></p>
<hr>
<ul>
<li><p>string  <strong>可变长字符序列</strong></p>
<ul>
<li>string和字符串字面值不一样。</li>
<li>cctype头文件中有很多函数。</li>
</ul>
</li>
<li><p>vector  <strong>一组同类型对象的容器</strong></p>
<ul>
<li>是一个“<strong>容纳着</strong>”其他对象的<strong>容器</strong>。</li>
<li>常见方法是先定义一个空vector，当运行时获取到元素的值后再逐一添加。<strong>push_back</strong>。</li>
<li>vector能高效增长。</li>
<li>通过下标访问不存在的元素会导致缓冲区溢出。</li>
</ul>
</li>
<li><p>迭代器</p>
<ul>
<li><p>名词本身有三种不同的含义</p>
<ul>
<li>迭代器概念本身</li>
<li>容器定义的迭代器类型</li>
<li>某个迭代器对象</li>
</ul>
</li>
<li><p>使用了迭代器的循环体，都不要向迭代器所属的容器添加元素</p>
</li>
</ul>
</li>
<li><p>数组</p>
<ul>
<li>使用数组作为一个auto变量的初始值时，推断得到的类型时指针；而使用decltype关键字时返回的类型则是数组。</li>
<li>内置的下标运算符所用的索引值不是无符号类型。</li>
<li>可以使用数组来初始化vector对象。</li>
</ul>
</li>
</ul>
<h3 id="第四章-表达式"><a href="#第四章-表达式" class="headerlink" title="第四章 表达式"></a>第四章 表达式</h3><ul>
<li>左值和右值<ul>
<li>当一个对象被用作<strong>右值</strong>的时候，用的是对象的值（内容）；当对象被用作<strong>左值</strong>的时候，用的是对象的身份（在内存中的位置）。</li>
<li>在需要右值的地方可以用左值来代替，但是不能把右值当成左值（也就是位置）来使用。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
